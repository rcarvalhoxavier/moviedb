/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListMovies.java
 *
 * Created on 13/03/2012, 23:54:50
 */
package com.moviedb.ui;

import com.moviedb.controler.ISearchIMDB;
import com.moviedb.model.Movie;
import com.moviedb.persistence.DAOMovie;
import com.moviedb.util.ImageUtil;
import com.moviedb.model.SearchAPI;
import com.moviedb.controler.SearchIMDB;
import com.moviedb.util.Configuration;
import com.moviedb.util.Util;
import java.awt.Desktop;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.json.JSONException;

/**
 *
 * @author rxavier
 */
public class ListMovies extends javax.swing.JFrame {

    private static final ResourceBundle bundle = ResourceBundle.getBundle("com/moviedb/ui/Bundle");

    /**
     * Creates new form ListMovies
     */
    public ListMovies() {
        initComponents();
        try {
            populateDirectoriesList();
        } catch (FileNotFoundException ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (Exception ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMovies = new javax.swing.JList();
        btnUpdate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnSerachInside = new javax.swing.JButton();
        txtYear = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtImdbID = new javax.swing.JTextField();
        btnRename = new javax.swing.JButton();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        lblGenero = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        lblRatingAdvancedSearch = new javax.swing.JLabel();
        cmbOption = new javax.swing.JComboBox();
        txtRating = new javax.swing.JTextField();
        btnNewSearch = new javax.swing.JButton();
        ckbAlreadySeen = new javax.swing.JCheckBox();
        btnListAll = new javax.swing.JButton();
        ckbTitle = new javax.swing.JCheckBox();
        ckbImdbID = new javax.swing.JCheckBox();
        ckbYear = new javax.swing.JCheckBox();
        pDetails = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pPoster = new javax.swing.JPanel();
        lblPoster = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        lblVotes = new javax.swing.JLabel();
        lblRating = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPlot = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtActors = new javax.swing.JTextArea();
        lblRuntime = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtGenres = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtWriter = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtDirectors = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        btnAddWatchList = new javax.swing.JToggleButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tMovies = new org.jdesktop.swingx.JXTable();
        ckbStats = new javax.swing.JCheckBox();
        lblContent = new org.jdesktop.swingx.JXLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        listContent = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        mItemOrganize = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/moviedb/ui/Bundle"); // NOI18N
        setTitle(bundle.getString("ListMovies.title")); // NOI18N

        listMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMoviesMouseClicked(evt);
            }
        });
        listMovies.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listMoviesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listMovies);

        btnUpdate.setText(bundle.getString("ListMovies.btnUpdate.text")); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSerachInside.setText(bundle.getString("ListMovies.btnSerachInside.text")); // NOI18N
        btnSerachInside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerachInsideActionPerformed(evt);
            }
        });

        txtYear.setToolTipText(bundle.getString("ListMovies.txtYear.toolTipText")); // NOI18N

        jLabel2.setText(bundle.getString("ListMovies.jLabel2.text")); // NOI18N

        jLabel1.setText(bundle.getString("ListMovies.jLabel1.text")); // NOI18N

        txtTitle.setToolTipText(bundle.getString("ListMovies.txtTitle.toolTipText")); // NOI18N

        jLabel3.setText(bundle.getString("ListMovies.jLabel3.text")); // NOI18N

        txtImdbID.setToolTipText(bundle.getString("ListMovies.txtImdbID.toolTipText")); // NOI18N

        btnRename.setText(bundle.getString("ListMovies.btnRename.text")); // NOI18N
        btnRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameActionPerformed(evt);
            }
        });

        jXTaskPane1.setCollapsed(true);
        jXTaskPane1.setTitle(bundle.getString("ListMovies.jXTaskPane1.title")); // NOI18N

        lblGenero.setText(bundle.getString("ListMovies.lblGenero.text")); // NOI18N

        jTextField1.setText(bundle.getString("ListMovies.jTextField1.text")); // NOI18N

        lblRatingAdvancedSearch.setText(bundle.getString("ListMovies.lblRatingAdvancedSearch.text")); // NOI18N

        cmbOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "<=" }));

        txtRating.setText(bundle.getString("ListMovies.txtRating.text")); // NOI18N

        javax.swing.GroupLayout jXTaskPane1Layout = new javax.swing.GroupLayout(jXTaskPane1.getContentPane());
        jXTaskPane1.getContentPane().setLayout(jXTaskPane1Layout);
        jXTaskPane1Layout.setHorizontalGroup(
            jXTaskPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXTaskPane1Layout.createSequentialGroup()
                .addComponent(lblGenero)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblRatingAdvancedSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRating, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jXTaskPane1Layout.setVerticalGroup(
            jXTaskPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXTaskPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblRatingAdvancedSearch)
                .addComponent(cmbOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jXTaskPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblGenero)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnNewSearch.setText(bundle.getString("ListMovies.btnNewSearch.text")); // NOI18N
        btnNewSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSearchActionPerformed(evt);
            }
        });

        ckbAlreadySeen.setText(bundle.getString("ListMovies.ckbAlreadySeen.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNewSearch)
                        .addGap(52, 52, 52)
                        .addComponent(btnRename)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSerachInside))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jXTaskPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtImdbID, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ckbAlreadySeen))))))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtImdbID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbAlreadySeen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jXTaskPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSerachInside)
                    .addComponent(btnRename)
                    .addComponent(btnNewSearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnListAll.setText(bundle.getString("ListMovies.btnListAll.text")); // NOI18N
        btnListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllActionPerformed(evt);
            }
        });

        ckbTitle.setSelected(true);
        ckbTitle.setText(bundle.getString("ListMovies.ckbTitle.text")); // NOI18N

        ckbImdbID.setSelected(true);
        ckbImdbID.setText(bundle.getString("ListMovies.ckbImdbID.text")); // NOI18N
        ckbImdbID.setEnabled(false);

        ckbYear.setSelected(true);
        ckbYear.setText(bundle.getString("ListMovies.ckbYear.text")); // NOI18N

        pDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ListMovies.pDetails.border.title"))); // NOI18N

        jLabel4.setText(bundle.getString("ListMovies.jLabel4.text")); // NOI18N

        jLabel5.setText(bundle.getString("ListMovies.jLabel5.text")); // NOI18N

        jLabel6.setText(bundle.getString("ListMovies.jLabel6.text")); // NOI18N

        jLabel7.setText(bundle.getString("ListMovies.jLabel7.text")); // NOI18N

        jLabel8.setText(bundle.getString("ListMovies.jLabel8.text")); // NOI18N

        pPoster.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPoster.setText(bundle.getString("ListMovies.lblPoster.text")); // NOI18N
        lblPoster.setToolTipText(bundle.getString("ListMovies.lblPoster.toolTipText")); // NOI18N

        javax.swing.GroupLayout pPosterLayout = new javax.swing.GroupLayout(pPoster);
        pPoster.setLayout(pPosterLayout);
        pPosterLayout.setHorizontalGroup(
            pPosterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPosterLayout.createSequentialGroup()
                .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pPosterLayout.setVerticalGroup(
            pPosterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPosterLayout.createSequentialGroup()
                .addComponent(lblPoster, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel9.setText(bundle.getString("ListMovies.jLabel9.text")); // NOI18N

        jLabel10.setText(bundle.getString("ListMovies.jLabel10.text")); // NOI18N

        jLabel11.setText(bundle.getString("ListMovies.jLabel11.text")); // NOI18N

        jLabel12.setText(bundle.getString("ListMovies.jLabel12.text")); // NOI18N

        txtPlot.setEditable(false);
        txtPlot.setLineWrap(true);
        txtPlot.setWrapStyleWord(true);
        txtPlot.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtPlot.setEnabled(false);
        jScrollPane3.setViewportView(txtPlot);

        txtActors.setEditable(false);
        txtActors.setForeground(new java.awt.Color(76, 76, 76));
        txtActors.setLineWrap(true);
        txtActors.setRows(4);
        txtActors.setWrapStyleWord(true);
        txtActors.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtActors.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtActors.setEnabled(false);
        jScrollPane4.setViewportView(txtActors);

        txtGenres.setEditable(false);
        txtGenres.setForeground(new java.awt.Color(76, 76, 76));
        txtGenres.setLineWrap(true);
        txtGenres.setRows(2);
        txtGenres.setWrapStyleWord(true);
        txtGenres.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtGenres.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtGenres.setEnabled(false);
        jScrollPane5.setViewportView(txtGenres);

        txtWriter.setEditable(false);
        txtWriter.setForeground(new java.awt.Color(76, 76, 76));
        txtWriter.setLineWrap(true);
        txtWriter.setRows(2);
        txtWriter.setWrapStyleWord(true);
        txtWriter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtWriter.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtWriter.setEnabled(false);
        jScrollPane6.setViewportView(txtWriter);

        txtDirectors.setEditable(false);
        txtDirectors.setForeground(new java.awt.Color(76, 76, 76));
        txtDirectors.setLineWrap(true);
        txtDirectors.setRows(4);
        txtDirectors.setWrapStyleWord(true);
        txtDirectors.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtDirectors.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtDirectors.setEnabled(false);
        jScrollPane7.setViewportView(txtDirectors);

        jLabel13.setText(bundle.getString("ListMovies.jLabel13.text")); // NOI18N

        btnOpen.setText(bundle.getString("ListMovies.btnOpen.text")); // NOI18N
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnAddWatchList.setText(bundle.getString("ListMovies.btnAddWatchList.text")); // NOI18N
        btnAddWatchList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddWatchListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pDetailsLayout = new javax.swing.GroupLayout(pDetails);
        pDetails.setLayout(pDetailsLayout);
        pDetailsLayout.setHorizontalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pDetailsLayout.createSequentialGroup()
                            .addGap(7, 7, 7)
                            .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel8)))
                        .addComponent(jLabel12))
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pDetailsLayout.createSequentialGroup()
                            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                        .addGroup(pDetailsLayout.createSequentialGroup()
                            .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane7)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pDetailsLayout.createSequentialGroup()
                                    .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6)
                                    .addGap(3, 3, 3)
                                    .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lblRuntime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pDetailsLayout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblVotes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(pPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(35, 35, 35)))
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addComponent(btnOpen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddWatchList)))
                        .addContainerGap())))
        );
        pDetailsLayout.setVerticalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7))
                    .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVotes, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(12, 12, 12)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnOpen)
                    .addComponent(btnAddWatchList))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tMovies.setModel(this.getModel());
        tMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tMoviesMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tMovies);

        ckbStats.setSelected(true);
        ckbStats.setText(bundle.getString("ListMovies.ckbStats.text")); // NOI18N

        lblContent.setText(bundle.getString("ListMovies.lblContent.text")); // NOI18N

        jScrollPane9.setViewportView(listContent);

        jMenu2.setText("Tools");

        mItemOrganize.setText("Organize Files");
        mItemOrganize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemOrganizeActionPerformed(evt);
            }
        });
        jMenu2.add(mItemOrganize);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ckbTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbYear)
                        .addGap(11, 11, 11)
                        .addComponent(ckbStats)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckbImdbID))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnListAll))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane8))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ckbTitle)
                            .addComponent(ckbYear)
                            .addComponent(ckbImdbID)
                            .addComponent(ckbStats))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnListAll))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            populateDirectoriesList();
        } catch (FileNotFoundException ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (Exception ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void listMoviesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listMoviesValueChanged

        try {
            int[] selected = listMovies.getSelectedIndices();
            if (selected.length == 1) {
                clearFilterFields();
                diretorioSelecionado = (File) ((DefaultListModel) listMovies.getModel()).get(listMovies.getSelectedIndex());

                populateListContent(diretorioSelecionado);

                String name = diretorioSelecionado.getName();
                Pattern pattern = Pattern.compile("#.tt\\d{7,}");
                Matcher mIMDBId = pattern.matcher(name);
                if (mIMDBId.find()) {
                    txtImdbID.setText(mIMDBId.group(0).replace("#", "").trim());
                }
                pattern = Pattern.compile("(19|20)\\d\\d");
                Matcher mYear = pattern.matcher(name);
                if (mYear.find()) {
                    txtYear.setText(mYear.group(0));
                }

                name = name.replaceAll("#.tt\\d{7,}", "").replaceAll("(19|20)\\d\\d", "").replaceAll("\\.|\\[|]|\\-", " ").replaceAll("!X", "").trim();

                Util util = new Util();
                try {
                    util.readProperties("app.config");
                    String path = util.getProperties().getProperty("replaceRegex", "vazio");

                    for (String p : path.split(" ")) {
                        name = name.replaceAll(p.trim(), "");
                    }
                } catch (IOException ex) {
                    logger.error("Erro ao ler arquivo app.config ", ex);
                }

                txtTitle.setText(name);

            } else if (selected.length > 1) {
                clearFilterFields();                
                movies = presenter.listAllMovies();
                List<Movie> moviesFounded = new ArrayList<Movie>();
                for (int _selected : selected) {
                    for (Movie _movie : movies) {
                        diretorioSelecionado = (File) ((DefaultListModel) listMovies.getModel()).get(_selected);
                        String imdbID = getMovieID(diretorioSelecionado.getName());
                        if (_movie.getImdbid().equals(imdbID)) {
                            moviesFounded.add(_movie);
                        }
                    }
                }

                addMoviesToList(moviesFounded);
            }
        } catch (FileNotFoundException ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (Exception ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_listMoviesValueChanged

    private void btnSerachInsideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerachInsideActionPerformed
        try {
            search();
        } catch (Exception e) {
            logger.error(bundle.getString("ERROR DURING READING"), e);
            JOptionPane.showMessageDialog(null, bundle.getString("ERROR DURING READING"));
        }
    }//GEN-LAST:event_btnSerachInsideActionPerformed

    private void btnRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenameActionPerformed
        try {
            if (!txtTitle.getText().trim().isEmpty()) {
                if (listMovies.getSelectedIndex() >= 0) {
                    diretorioSelecionado = (File) ((DefaultListModel) listMovies.getModel()).get(listMovies.getSelectedIndex());
                    if (tMovies.getSelectedRow() >= 0) {

                        movie = (Movie) ((ObjectTableModel) tMovies.getModel()).getRowObject(tMovies.getSelectedRow());

                        String name = "";
                        if (ckbTitle.isSelected()) {
                            name = movie.getTitle();
                        }
                        if (ckbYear.isSelected()) {
                            name += " - " + movie.getYear();
                        }
                        if (ckbImdbID.isSelected()) {
                            name += " # " + movie.getImdbid();
                        }
                        if (ckbStats.isSelected()) {
                            if (movie.isWatched()) {
                                name += " !X";
                            }
                        }
                        if (!name.isEmpty()) {
                            Util.renameFile(diretorioSelecionado, name);
                        } else {
                            Util.renameFile(diretorioSelecionado, diretorioSelecionado.getName() + " # " + movie.getImdbid());
                        }
                        populateDirectoriesList();
                    } else {
                        JOptionPane.showMessageDialog(null, bundle.getString("SELECT ONE MOVIE"));
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (Exception ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnRenameActionPerformed

    private void btnListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllActionPerformed
        listAllSavedMovies();
    }//GEN-LAST:event_btnListAllActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        try {
            Util.openURL(movie.getImdburl());
        } catch (Exception e) {
            logger.error(e);
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void mItemOrganizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemOrganizeActionPerformed
        try {
            organizeFilesInDirectories();
        } catch (FileNotFoundException ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (Exception ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_mItemOrganizeActionPerformed

    private void tMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tMoviesMouseClicked
        try {
            if (evt.getClickCount() == 1) {
                if (tMovies.getSelectedRow() >= 0) {
                    movie = (Movie) ((ObjectTableModel) tMovies.getModel()).getRowObject(tMovies.getSelectedRow());
                    populateFilterFields(movie);
                }
            }
            if (evt.getClickCount() == 2) {
                if (tMovies.getSelectedRow() >= 0) {
                    search();
                }
            }

        } catch (Exception ex) {
            logger.error("Erro ao ler movie", ex);
        }
    }//GEN-LAST:event_tMoviesMouseClicked

    private void btnNewSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSearchActionPerformed
        clearFilterFields();
        clearDetails();
    }//GEN-LAST:event_btnNewSearchActionPerformed

    private void btnAddWatchListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWatchListActionPerformed
        try {
            addToWatchList(movie);
        } catch (Exception ex) {
            logger.error("Erro ao adicionar a lista", ex);
        }
    }//GEN-LAST:event_btnAddWatchListActionPerformed

    private void listMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMoviesMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                search();
            } catch (Exception ex) {
                logger.error("Erro ao buscar", ex);
            }
        }
    }//GEN-LAST:event_listMoviesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        BasicConfigurator.configure();
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ListMovies().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAddWatchList;
    private javax.swing.JButton btnListAll;
    private javax.swing.JButton btnNewSearch;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRename;
    private javax.swing.JButton btnSerachInside;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox ckbAlreadySeen;
    private javax.swing.JCheckBox ckbImdbID;
    private javax.swing.JCheckBox ckbStats;
    private javax.swing.JCheckBox ckbTitle;
    private javax.swing.JCheckBox ckbYear;
    private javax.swing.JComboBox cmbOption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private org.jdesktop.swingx.JXLabel lblContent;
    private javax.swing.JLabel lblGenero;
    private javax.swing.JLabel lblPoster;
    private javax.swing.JLabel lblRating;
    private javax.swing.JLabel lblRatingAdvancedSearch;
    private javax.swing.JLabel lblRuntime;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVotes;
    private javax.swing.JLabel lblYear;
    private javax.swing.JList listContent;
    private javax.swing.JList listMovies;
    private javax.swing.JMenuItem mItemOrganize;
    private javax.swing.JPanel pDetails;
    private javax.swing.JPanel pPoster;
    private org.jdesktop.swingx.JXTable tMovies;
    private javax.swing.JTextArea txtActors;
    private javax.swing.JTextArea txtDirectors;
    private javax.swing.JTextArea txtGenres;
    private javax.swing.JTextField txtImdbID;
    private javax.swing.JTextArea txtPlot;
    private javax.swing.JTextField txtRating;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextArea txtWriter;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    private Movie movie;
    private List<Movie> movies;
    private File diretorioSelecionado;
    static final Logger logger = Logger.getLogger(ListMovies.class);
    private ListMoviesPresenter presenter = new ListMoviesPresenter();

    private void clearFilterFields() {
        txtTitle.setText("");
        txtYear.setText("");
        txtImdbID.setText("");
    }

    private void clearDetails() {
        txtActors.setText("");
        txtGenres.setText("");
        txtPlot.setText("");
        lblRuntime.setText("");
        lblRating.setText("");
        lblTitle.setText("");
        lblVotes.setText("");
        txtGenres.setText("");
        lblYear.setText("");
        lblPoster.setText("");
        lblPoster.setIcon(null);
        btnAddWatchList.setSelected(false);
    }

    private void populateFilterFields(Movie movie) {
        clearFilterFields();
        txtTitle.setText(movie.getTitle());
        txtYear.setText(String.valueOf(movie.getYear()));
        txtImdbID.setText(movie.getImdbid());
    }

    private void populateDetails(Movie movie) throws IOException, InterruptedException {
        clearDetails();

        txtActors.setText(movie.getActors());
        txtGenres.setText(movie.getGenres());
        lblRuntime.setText(movie.getRuntime());
        txtPlot.setText(movie.getPlot());
        lblRating.setText(String.valueOf(movie.getRating()));
        lblTitle.setText(movie.getTitle());
        lblVotes.setText(String.valueOf(movie.getVotes()));
        txtWriter.setText(movie.getWriter());
        txtDirectors.setText(movie.getDirector());
        lblYear.setText(String.valueOf(movie.getYear()));
        lblPoster.setText(bundle.getString("LOADING"));
        if (movie.isWatched()) {
            btnAddWatchList.setSelected(true);
        } else {
            btnAddWatchList.setSelected(false);
        }

        if (!movie.getPosterUrl().isEmpty()) {
            final String url;
            url = movie.getPosterUrl();
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    try {
                        byte[] img;
                        img = Util.getByteFromURL(url);
                        img = new ImageUtil().resizeImage(img, 261, 75);
                        Icon icon = new ImageIcon(img);
                        lblPoster.setText("");
                        lblPoster.setIcon(icon);
                    } catch (InterruptedException ex) {
                        logger.error(ex);
                        lblPoster.setText(bundle.getString("NO IMAGE"));
                    } catch (IOException ex) {
                        logger.error(ex);
                        lblPoster.setText(bundle.getString("NO IMAGE"));
                    }
                }
            });
        } else {
            lblPoster.setText(bundle.getString("NO IMAGE"));
        }

    }

    private void clearMoviesTable() {
        while (tMovies.getModel().getRowCount() > 0) {
            ((DefaultTableModel) tMovies.getModel()).removeRow(0);
        }
    }

    private String getMovieID(String value) {
        if (!value.trim().isEmpty()) {

            int positionStart = value.indexOf("#") + 1;
            int positionEnd = value.lastIndexOf("_");
            if (positionEnd == -1) {
                value = value.substring(positionStart).trim();
            } else {
                value = value.substring(positionStart, positionEnd);
            }

            return value;
        }
        return "";
    }

    private void addMoviesToList(List<Movie> objs) {
        if (objs.size() > 0) {
            clearMoviesTable();
            ObjectTableModel modelo = (ObjectTableModel) tMovies.getModel();
            modelo.setRowObject(movies.toArray());
            tMovies.setModel(modelo);
        }
    }

    private void search() throws IOException, InterruptedException, Exception {

        String title = null;
        String imdbID = null;
        int year = 0;

        if (!txtImdbID.getText().trim().isEmpty()) {
            imdbID = txtImdbID.getText().trim();
        }
        if (!txtTitle.getText().trim().isEmpty()) {
            title = txtTitle.getText().trim();
        }
        if (!txtYear.getText().trim().isEmpty()) {
            try {
                year = Integer.parseInt(txtYear.getText().trim());
            } catch (NumberFormatException e) {
                year = 0;
            }
        }

        movies = presenter.searchInSide(imdbID, title, year);
        if (movies.size() <= 0) {
            movies = presenter.searchOutSide(imdbID, title, year);
        }
        clearDetails();

        if (movies.size() == 1) {
            movie = movies.get(0);

            if (movie != null) {
                Movie movieFounded = presenter.search(movie);
                if (!movie.equals(movieFounded)) {
                    presenter.save(movie);
                }
                populateDetails(movie);
                populateFilterFields(movie);
            } else {
                JOptionPane.showMessageDialog(null, bundle.getString("NO RECORDS FOUND"));
            }
        } else {
            addMoviesToList(movies);
        }
    }

    private ObjectTableModel getModel() {

        return (new com.moviedb.ui.ObjectTableModel(
                new Object[][]{},
                new String[]{
                    "IMDB ID", "TITLE", "RATING"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }

            public Object getValueAt(int row, int column) {
                switch (column) {
                    case 0:
                        return ((Movie) getRowObject(row)).getImdbid();
                    case 1:
                        return ((Movie) getRowObject(row)).getTitle() + " - " + ((Movie) getRowObject(row)).getYear();
                    case 2:
                        return ((Movie) getRowObject(row)).getRating();
                    default:
                        return null;
                }
            }
        });

    }

    private void listAllSavedMovies() {
        movies = presenter.listAllMovies();
        addMoviesToList(movies);
    }

    private void populateDirectoriesList() throws FileNotFoundException, Exception {
        try {

            Collection<File> dirsFounded = new ArrayList<File>();
            DefaultListModel modelo = new DefaultListModel() {

                @Override
                public Object getElementAt(int i) {
                    return ((File) super.getElementAt(i)).getName();
                }
            };

            String path = new Configuration().getPath();

            if (path.isEmpty()) {
                throw new Exception(bundle.getString("TAG PATH DONT FOUND"));
            }

            for (String p : path.split(";")) {
                dirsFounded.addAll(new Util().listFilesByPath(new File(p), 1));
            }
            logger.info("Dir founded: " + dirsFounded.size());

            for (File file : dirsFounded) {
                modelo.addElement(file);
            }

            listMovies.setModel(modelo);

        } catch (IOException ex) {
            throw new FileNotFoundException(bundle.getString("FILE app.config DONT FOUND"));
        }
    }

    private void organizeFilesInDirectories() throws FileNotFoundException, Exception {
        Util util = new Util();
        Collection<File> filesFounded = new ArrayList<File>();
        try {
            String path = new Configuration().getPath();
            String extension = new Configuration().getExtensions();


            if (extension.isEmpty()) {
                throw new Exception(bundle.getString("TAG PATH DONT FOUND"));
            }
            if (path.isEmpty()) {
                throw new Exception(bundle.getString("TAG PATH DONT FOUND"));
            }

            for (String p : path.split(";")) {
                filesFounded.addAll(util.listFilesByPath(new File(p), 0));
            }


            for (File file : filesFounded) {
                if (file.getName().lastIndexOf(".") > -1) {
                    String nameExtension = file.getName().substring(file.getName().lastIndexOf("."));
                    String onlyName = file.getName().substring(0, file.getName().lastIndexOf("."));
                    for (String ex : extension.split(";")) {
                        if (nameExtension.equals(ex)) {
                            File newDir = new File(file.getParent() + "/" + onlyName);
                            boolean success = (newDir).mkdir();
                            if (success) {
                                new File(file.getParent() + "/" + onlyName + ".srt").renameTo(new File(newDir.getPath() + "/" + onlyName + ".srt"));
                                file.renameTo(new File(newDir.getPath() + "/" + file.getName()));
                                break;
                            }
                        }
                    }
                }

            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("FILE app.config DONT FOUND"));

        }

    }

    private void addToWatchList(Movie movie) throws Exception {
        if (movie != null) {
            if (movie.isWatched()) {
                movie.setWatched(false);
            } else {
                movie.setWatched(true);
            }
            presenter.save(movie);
        }
    }

    private void populateListContent(File diretorioSelecionado) throws FileNotFoundException, Exception {
        Collection<File> filesFounded = new ArrayList<File>();
        DefaultListModel modelo = new DefaultListModel() {

            @Override
            public Object getElementAt(int i) {
                return ((File) super.getElementAt(i)).getName() + " - " + new Util().roundBit(((File) super.getElementAt(i)).length());
            }
        };

        filesFounded.addAll(new Util().listFilesByPath(diretorioSelecionado, 0));

        for (File file : filesFounded) {
            logger.info(file.getName());
            modelo.addElement(file);
        }

        listContent.setModel(modelo);

    }
}
