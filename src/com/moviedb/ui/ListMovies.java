/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListMovies.java
 *
 * Created on 13/03/2012, 23:54:50
 */
package com.moviedb.ui;

import com.moviedb.model.Movie;
import com.moviedb.persistence.DAOMovie;
import com.moviedb.util.SearchAPI;
import com.moviedb.util.SearchIMDB;
import com.moviedb.util.Util;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;

/**
 *
 * @author rxavier
 */
public class ListMovies extends javax.swing.JFrame {
    
    private static final ResourceBundle bundle = ResourceBundle.getBundle("com/moviedb/ui/Bundle");

    /** Creates new form ListMovies */
    public ListMovies() {
        initComponents();
        populateListDir();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMovies = new javax.swing.JList();
        btnUpdate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnSerachOutside = new javax.swing.JButton();
        btnSerachInside = new javax.swing.JButton();
        txtYear = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtImdbID = new javax.swing.JTextField();
        rbImdbApi = new javax.swing.JRadioButton();
        rbDeanclatworthy = new javax.swing.JRadioButton();
        btnRename = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tMovies = new javax.swing.JTable();
        btnListAll = new javax.swing.JButton();
        ckbTitle = new javax.swing.JCheckBox();
        ckbImdbID = new javax.swing.JCheckBox();
        ckbYear = new javax.swing.JCheckBox();
        pDetails = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pPoster = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        lblVotes = new javax.swing.JLabel();
        lblRating = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPlot = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtActors = new javax.swing.JTextArea();
        lblRuntime = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtGenres = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtWriter = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        mItemOrganize = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/moviedb/ui/Bundle"); // NOI18N
        setTitle(bundle.getString("ListMovies.title")); // NOI18N
        setResizable(false);

        listMovies.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listMoviesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listMovies);

        btnUpdate.setText(bundle.getString("ListMovies.btnUpdate.text")); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSerachOutside.setText(bundle.getString("ListMovies.btnSerachOutside.text")); // NOI18N
        btnSerachOutside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerachOutsideActionPerformed(evt);
            }
        });

        btnSerachInside.setText(bundle.getString("ListMovies.btnSerachInside.text")); // NOI18N
        btnSerachInside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerachInsideActionPerformed(evt);
            }
        });

        txtYear.setToolTipText(bundle.getString("ListMovies.txtYear.toolTipText")); // NOI18N

        jLabel2.setText(bundle.getString("ListMovies.jLabel2.text")); // NOI18N

        jLabel1.setText(bundle.getString("ListMovies.jLabel1.text")); // NOI18N

        txtTitle.setToolTipText(bundle.getString("ListMovies.txtTitle.toolTipText")); // NOI18N

        jLabel3.setText(bundle.getString("ListMovies.jLabel3.text")); // NOI18N

        txtImdbID.setToolTipText(bundle.getString("ListMovies.txtImdbID.toolTipText")); // NOI18N

        buttonGroup1.add(rbImdbApi);
        rbImdbApi.setSelected(true);
        rbImdbApi.setText(bundle.getString("ListMovies.rbImdbApi.text")); // NOI18N

        buttonGroup1.add(rbDeanclatworthy);
        rbDeanclatworthy.setText(bundle.getString("ListMovies.rbDeanclatworthy.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtImdbID, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                            .addComponent(txtTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSerachInside)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSerachOutside)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbImdbApi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbDeanclatworthy)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtImdbID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSerachInside)
                    .addComponent(btnSerachOutside)
                    .addComponent(rbImdbApi)
                    .addComponent(rbDeanclatworthy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnRename.setText(bundle.getString("ListMovies.btnRename.text")); // NOI18N
        btnRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameActionPerformed(evt);
            }
        });

        btnOpen.setText(bundle.getString("ListMovies.btnOpen.text")); // NOI18N
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        tMovies.setModel(this.getModel());
        tMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tMoviesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tMovies);

        btnListAll.setText(bundle.getString("ListMovies.btnListAll.text")); // NOI18N
        btnListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllActionPerformed(evt);
            }
        });

        ckbTitle.setSelected(true);
        ckbTitle.setText(bundle.getString("ListMovies.ckbTitle.text")); // NOI18N

        ckbImdbID.setSelected(true);
        ckbImdbID.setText(bundle.getString("ListMovies.ckbImdbID.text")); // NOI18N
        ckbImdbID.setEnabled(false);

        ckbYear.setSelected(true);
        ckbYear.setText(bundle.getString("ListMovies.ckbYear.text")); // NOI18N

        pDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ListMovies.pDetails.border.title"))); // NOI18N

        jLabel4.setText(bundle.getString("ListMovies.jLabel4.text")); // NOI18N

        jLabel5.setText(bundle.getString("ListMovies.jLabel5.text")); // NOI18N

        jLabel6.setText(bundle.getString("ListMovies.jLabel6.text")); // NOI18N

        jLabel7.setText(bundle.getString("ListMovies.jLabel7.text")); // NOI18N

        jLabel8.setText(bundle.getString("ListMovies.jLabel8.text")); // NOI18N

        pPoster.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pPosterLayout = new javax.swing.GroupLayout(pPoster);
        pPoster.setLayout(pPosterLayout);
        pPosterLayout.setHorizontalGroup(
            pPosterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
        );
        pPosterLayout.setVerticalGroup(
            pPosterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );

        jLabel9.setText(bundle.getString("ListMovies.jLabel9.text")); // NOI18N

        jLabel10.setText(bundle.getString("ListMovies.jLabel10.text")); // NOI18N

        jLabel11.setText(bundle.getString("ListMovies.jLabel11.text")); // NOI18N

        jLabel12.setText(bundle.getString("ListMovies.jLabel12.text")); // NOI18N

        txtPlot.setEditable(false);
        txtPlot.setLineWrap(true);
        txtPlot.setWrapStyleWord(true);
        txtPlot.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtPlot.setEnabled(false);
        jScrollPane3.setViewportView(txtPlot);

        txtActors.setEditable(false);
        txtActors.setForeground(new java.awt.Color(76, 76, 76));
        txtActors.setLineWrap(true);
        txtActors.setRows(4);
        txtActors.setWrapStyleWord(true);
        txtActors.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtActors.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtActors.setEnabled(false);
        jScrollPane4.setViewportView(txtActors);

        txtGenres.setEditable(false);
        txtGenres.setForeground(new java.awt.Color(76, 76, 76));
        txtGenres.setLineWrap(true);
        txtGenres.setRows(2);
        txtGenres.setWrapStyleWord(true);
        txtGenres.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtGenres.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtGenres.setEnabled(false);
        jScrollPane5.setViewportView(txtGenres);

        txtWriter.setEditable(false);
        txtWriter.setForeground(new java.awt.Color(76, 76, 76));
        txtWriter.setLineWrap(true);
        txtWriter.setRows(2);
        txtWriter.setWrapStyleWord(true);
        txtWriter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtWriter.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        txtWriter.setEnabled(false);
        jScrollPane6.setViewportView(txtWriter);

        javax.swing.GroupLayout pDetailsLayout = new javax.swing.GroupLayout(pDetails);
        pDetails.setLayout(pDetailsLayout);
        pDetailsLayout.setHorizontalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pDetailsLayout.createSequentialGroup()
                            .addGap(7, 7, 7)
                            .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel8)))
                        .addComponent(jLabel12))
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addGroup(pDetailsLayout.createSequentialGroup()
                                        .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addGap(3, 3, 3)
                                        .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblRuntime, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pDetailsLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblVotes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(pPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(232, 232, 232)))
                        .addGap(12, 12, 12))
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pDetailsLayout.setVerticalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7))
                    .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVotes, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(12, 12, 12)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pPoster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(215, 215, 215))
        );

        jMenu2.setText("Tools");

        mItemOrganize.setText("Organize Files");
        mItemOrganize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemOrganizeActionPerformed(evt);
            }
        });
        jMenu2.add(mItemOrganize);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRename)
                        .addGap(8, 8, 8)
                        .addComponent(ckbTitle)
                        .addGap(5, 5, 5)
                        .addComponent(ckbYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbImdbID))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(btnOpen, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnListAll))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRename)
                            .addComponent(ckbTitle)
                            .addComponent(ckbYear)
                            .addComponent(ckbImdbID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE))
                    .addComponent(pDetails, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListAll)
                    .addComponent(btnUpdate))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        populateListDir();
    }//GEN-LAST:event_btnUpdateActionPerformed
    
    private void listMoviesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listMoviesValueChanged
        int[] selected = listMovies.getSelectedIndices();
        if (selected.length == 1) {
            clearFields();
            diretorioSelecionado = (File) ((DefaultListModel) listMovies.getModel()).get(listMovies.getSelectedIndex());
            
            String name = diretorioSelecionado.getName();
            Pattern pattern = Pattern.compile("#.tt\\d{7,}");
            Matcher mIMDBId = pattern.matcher(name);
            if (mIMDBId.find()) {
                txtImdbID.setText(mIMDBId.group(0).replace("#", "").trim());
            }
            pattern = Pattern.compile("(19|20)\\d\\d");
            Matcher mYear = pattern.matcher(name);
            if (mYear.find()) {
                txtYear.setText(mYear.group(0));
            }
            
            name = name.replaceAll("#.tt\\d{7,}", "").replaceAll("(19|20)\\d\\d", "").replaceAll("\\.|\\[|]|\\-", " ").trim();
            
            Util util = new Util();
            try {
                util.readProperties("app.config");
                String path = util.getProperties().getProperty("replaceRegex", "vazio");
                
                for (String p : path.split(" ")) {
                    name = name.replaceAll(p.trim(), "");
                }
                
                
            } catch (IOException ex) {
                Logger.getLogger(ListMovies.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            
            
            txtTitle.setText(name);
            
        } else if (selected.length > 1) {
            clearFields();
            dao = new DAOMovie();
            movies = dao.listar();
            List<Movie> moviesFounded = new ArrayList<Movie>();
            for (int _selected : selected) {
                for (Movie _movie : movies) {
                    diretorioSelecionado = (File) ((DefaultListModel) listMovies.getModel()).get(_selected);
                    String imdbID = getMoviesID(diretorioSelecionado.getName());
                    if (_movie.getImdbid().equals(imdbID)) {
                        moviesFounded.add(_movie);
                    }
                }
            }
            
            addListMovies(moviesFounded);
        }
    }//GEN-LAST:event_listMoviesValueChanged
    
    private void btnSerachInsideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerachInsideActionPerformed
        searchInside();
    }//GEN-LAST:event_btnSerachInsideActionPerformed
    
    private void btnSerachOutsideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerachOutsideActionPerformed
        try {
            searchOutside();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("UNKNOW HOST"));
        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("ERROR DURING READING"));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("UNKNOW ERROR"));
        }
    }//GEN-LAST:event_btnSerachOutsideActionPerformed
    
    private void btnRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenameActionPerformed
        if (!txtTitle.getText().trim().isEmpty()) {
            if (listMovies.getSelectedIndex() >= 0) {
                diretorioSelecionado = (File) ((DefaultListModel) listMovies.getModel()).get(listMovies.getSelectedIndex());
                if (tMovies.getSelectedRow() >= 0) {
                    movie = (Movie) ((ObjectTableModel) tMovies.getModel()).getRowObject(tMovies.getSelectedRow());
                    
                    String name = "";
                    if (ckbTitle.isSelected()) {
                        name = movie.getTitle();
                    }
                    if (ckbYear.isSelected()) {
                        name += " - " + movie.getYear();
                    }
                    if (ckbImdbID.isSelected()) {
                        name += " # " + movie.getImdbid();
                    }
                    if (!name.isEmpty()) {
                        rename(diretorioSelecionado, name);
                    } else {
                        rename(diretorioSelecionado, diretorioSelecionado.getName() + " # " + movie.getImdbid());
                    }
                    populateListDir();
                } else {
                    JOptionPane.showMessageDialog(null, bundle.getString("SELECT ONE MOVIE"));
                }
            }
        }
    }//GEN-LAST:event_btnRenameActionPerformed
    
    private void btnListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllActionPerformed
        listAllSavedMovies();
    }//GEN-LAST:event_btnListAllActionPerformed
    
    private void tMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tMoviesMouseClicked
        try {
            if (evt.getClickCount() == 1) {
                if (tMovies.getSelectedRow() >= 0) {
                    movie = (Movie) ((ObjectTableModel) tMovies.getModel()).getRowObject(tMovies.getSelectedRow());
                    populateFields(movie);
                }
            }
            if (evt.getClickCount() == 2) {
                if (tMovies.getSelectedRow() >= 0) {
                    movie = (Movie) ((ObjectTableModel) tMovies.getModel()).getRowObject(tMovies.getSelectedRow());
                    populateDetails(movie);
                }
            }
            
        } catch (Exception ex) {
            Logger.getLogger(ListMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tMoviesMouseClicked
    
    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
    }//GEN-LAST:event_btnOpenActionPerformed
    
    private void mItemOrganizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemOrganizeActionPerformed
        organizeFiles();
    }//GEN-LAST:event_mItemOrganizeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new ListMovies().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnListAll;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRename;
    private javax.swing.JButton btnSerachInside;
    private javax.swing.JButton btnSerachOutside;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox ckbImdbID;
    private javax.swing.JCheckBox ckbTitle;
    private javax.swing.JCheckBox ckbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblRating;
    private javax.swing.JLabel lblRuntime;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVotes;
    private javax.swing.JLabel lblYear;
    private javax.swing.JList listMovies;
    private javax.swing.JMenuItem mItemOrganize;
    private javax.swing.JPanel pDetails;
    private javax.swing.JPanel pPoster;
    private javax.swing.JRadioButton rbDeanclatworthy;
    private javax.swing.JRadioButton rbImdbApi;
    private javax.swing.JTable tMovies;
    private javax.swing.JTextArea txtActors;
    private javax.swing.JTextArea txtGenres;
    private javax.swing.JTextField txtImdbID;
    private javax.swing.JTextArea txtPlot;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextArea txtWriter;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    private DAOMovie dao;
    private Movie movie;
    private List<Movie> movies;
    private SearchIMDB search;
    private File diretorioSelecionado;
    
    private void clearFields() {
        txtTitle.setText("");
        txtYear.setText("");
        txtImdbID.setText("");
    }
    
    private void clearDetails() {
        txtActors.setText("");
        txtGenres.setText("");
        txtPlot.setText("");
        lblRuntime.setText("");
        lblRating.setText("");
        lblTitle.setText("");
        lblVotes.setText("");
        txtGenres.setText("");
        lblYear.setText("");
    }
    
    private void populateFields(Movie movie) {
        clearFields();
        txtTitle.setText(movie.getTitle());
        txtYear.setText(String.valueOf(movie.getYear()));
        txtImdbID.setText(movie.getImdbid());
    }
    
    private void populateDetails(Movie movie) {
        clearDetails();
        txtActors.setText(movie.getActors());
        txtGenres.setText(movie.getGenres());
        lblRuntime.setText(movie.getRuntime());
        txtPlot.setText(movie.getPlot());
        lblRating.setText(String.valueOf(movie.getRating()));
        lblTitle.setText(movie.getTitle());
        lblVotes.setText(String.valueOf(movie.getVotes()));
        txtWriter.setText(movie.getWriter());
        lblYear.setText(String.valueOf(movie.getYear()));
        
    }
    
    private void addListMovies(Movie obj) {
        movies = new ArrayList<Movie>();
        movies.add(obj);
        addListMovies(movies);
    }
    
    private void clearMoviesTable() {
        while (tMovies.getModel().getRowCount() > 0) {
            ((DefaultTableModel) tMovies.getModel()).removeRow(0);
        }
    }
    
    private String getMoviesID(String value) {
        if (!value.trim().isEmpty()) {
            
            int positionStart = value.indexOf("#") + 1;
            int positionEnd = value.lastIndexOf("_");
            if (positionEnd == -1) {
                value = value.substring(positionStart).trim();
            } else {
                value = value.substring(positionStart, positionEnd);
            }
            
            return value;
        }
        return "";
    }
    
    private void addListMovies(List<Movie> objs) {
        clearMoviesTable();
        ObjectTableModel modelo = (ObjectTableModel) tMovies.getModel();
        modelo.setRowObject(objs.toArray());
        tMovies.setModel(modelo);
    }
    
    private void rename(File file, String newName) {
        File filePath = file.getParentFile();
        File[] directories = null;
        final String name = newName;
        if (filePath.isDirectory()) {
            directories = filePath.listFiles(new FileFilter() {
                
                public boolean accept(File pathname) {
                    if (pathname.isDirectory()) {
                        if (pathname.getName().equals(name)) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            });
        }
        if (directories.length > 0) {
            newName = newName + " " + (directories.length + 1);
        }
        
        
        newName = newName.replace("/", " ");
        file.renameTo(new File(file.getParent() + "/" + newName));
    }
    
    private void searchInside() {
        dao = new DAOMovie();
        if (!txtImdbID.getText().trim().isEmpty()) {
            movie = new Movie();
            movie.setImdbid(txtImdbID.getText().trim());
            movie = dao.find(movie);
        } else if (!txtTitle.getText().trim().isEmpty() && !txtYear.getText().trim().isEmpty()) {
            movie = dao.buscar(txtTitle.getText().trim(), Integer.parseInt(txtYear.getText().trim()));
        } else if (!txtTitle.getText().trim().isEmpty() && txtYear.getText().trim().isEmpty()) {
            movie = dao.buscar(txtTitle.getText());
        }
        clearMoviesTable();
        if (movie != null) {
            addListMovies(movie);
            populateDetails(movie);
            ListSelectionModel selectionModel = tMovies.getSelectionModel();
            selectionModel.setSelectionInterval(0, 1);
        }
    }
    
    private void searchOutside() throws IOException, JSONException, Exception {
        search = new SearchIMDB();
        
        String title = null;
        int year = 0;
        String imdbID = null;
        
        if (!txtTitle.getText().trim().isEmpty()) {
            title = txtTitle.getText().trim();
        }
        if (!txtYear.getText().trim().isEmpty()) {
            year = Integer.parseInt(txtYear.getText().trim());
        }
        if (!txtImdbID.getText().trim().isEmpty()) {
            imdbID = txtImdbID.getText().trim();
        }
        if (title != null | year != 0 | imdbID != null) {
            if (rbImdbApi.isSelected()) {
                movie = search.search(title, year, imdbID, SearchAPI.IMDBAPI);
            } else {
                movie = search.search(title, year, imdbID, SearchAPI.DeanclatWorthy);
            }
        }
        clearMoviesTable();
        if (movie.getImdbid() != null) {
            dao = new DAOMovie();
            Movie movieFounded = dao.buscar(movie.getTitle(), movie.getYear());
            
            if (!movie.equals(movieFounded)) {
                dao.salvar(movie);
            }
            
            if (movie != null) {
                addListMovies(movie);
                populateDetails(movie);
                ListSelectionModel selectionModel = tMovies.getSelectionModel();
                selectionModel.setSelectionInterval(0, 1);
            }
            
            populateFields(movie);
        } else {
            JOptionPane.showMessageDialog(null, bundle.getString("NO RECORDS FOUND"));
        }
    }
    
    private ObjectTableModel getModel() {
        
        return (new com.moviedb.ui.ObjectTableModel(
                new Object[][]{},
                new String[]{
                    "IMDB ID", "TITLE", "RATING"
                }) {
            
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false
            };
            
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
            
            public Object getValueAt(int row, int column) {
                switch (column) {
                    case 0:
                        return ((Movie) getRowObject(row)).getImdbid();
                    case 1:
                        return ((Movie) getRowObject(row)).getTitle();
                    case 2:
                        return ((Movie) getRowObject(row)).getRating();
                    default:
                        return null;
                }
            }
        });
        
    }
    
    private void listAllSavedMovies() {
        dao = new DAOMovie();
        movies = dao.listar();
        addListMovies(movies);
    }
    
    private void populateListDir() {
        DefaultListModel modelo = new DefaultListModel() {
            
            @Override
            public Object getElementAt(int i) {
                return ((File) super.getElementAt(i)).getName();
            }
        };
        Collection<File> dirsFounded = listAllDirByPath();
        for (File file : dirsFounded) {
            modelo.addElement(file);
        }
        
        listMovies.setModel(modelo);
        
    }
    
    private Collection<File> listFilesByPath() {
        Util util = new Util();
        try {
            util.readProperties("app.config");
            
            String path = util.getProperties().getProperty("path", "vazio");
            
            Collection<File> filesFounded = new ArrayList<File>();
            
            if (!path.equals("vazio")) {
                for (String p : path.split(";")) {
                    
                    File directory = new File(p);
                    File[] files = null;
                    if (directory.isDirectory()) {
                        files = directory.listFiles(new FileFilter() {
                            
                            public boolean accept(File pathname) {
                                return pathname.isFile();
                                
                            }
                        });
                    }
                    if (files != null) {
                        System.out.println(files.length);
                        filesFounded.addAll(Arrays.asList(files));
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, bundle.getString("TAG PATH DONT FOUND"));
            }
            
            return filesFounded;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("FILE app.config DONT FOUND"));
            return new ArrayList<File>();
        }
        
    }
    
    private Collection<File> listAllDirByPath() {
        Util util = new Util();
        try {
            util.readProperties("app.config");
            
            String path = util.getProperties().getProperty("path", "vazio");            
            
            Collection<File> dirFounded = new ArrayList<File>();
            
            if (!path.equals("vazio")) {
                for (String p : path.split(";")) {
                    
                    File directory = new File(p);
                    File[] directories = null;
                    if (directory.isDirectory()) {
                        directories = directory.listFiles(new FileFilter() {
                            
                            public boolean accept(File pathname) {
                                return pathname.isDirectory();
                                
                            }
                        });
                    }
                    if (directories != null) {
                        System.out.println(directories.length);
                        dirFounded.addAll(Arrays.asList(directories));
                    }
                }
                return dirFounded;
            } else {
                JOptionPane.showMessageDialog(null, bundle.getString("TAG PATH DONT FOUND"));
                return new ArrayList<File>();
            }
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("FILE app.config DONT FOUND"));
            return new ArrayList<File>();
        }
        
    }
    
    private void organizeFiles() {
        Util util = new Util();
        try {
            util.readProperties("app.config");
            String extension = util.getProperties().getProperty("extension", "vazio");
            String[] extensions = extension.split(";");
            
            Collection<File> filesFounded = listFilesByPath();
            
            for (File file : filesFounded) {
                if (file.getName().lastIndexOf(".") > -1) {
                    String nameExtension = file.getName().substring(file.getName().lastIndexOf("."));
                    String onlyName = file.getName().substring(0, file.getName().lastIndexOf("."));
                    for (String ex : extensions) {
                        if (nameExtension.equals(ex)) {
                            
                            File newDir = new File(file.getParent() + "/" + onlyName);
                            boolean success = (newDir).mkdir();
                            if (success) {
                                new File(file.getParent() + "/" + onlyName + ".srt").renameTo(new File(newDir.getPath() + "/" + onlyName + ".srt"));
                                file.renameTo(new File(newDir.getPath() + "/" + file.getName()));
                                break;
                            }
                        }
                    }
                }
                
            }
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("FILE app.config DONT FOUND"));
        }
        
    }
}
